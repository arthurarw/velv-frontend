import Head from 'next/head'
import {
    AppBar,
    Box,
    Button,
    Checkbox,
    CircularProgress,
    Container,
    Divider,
    FormControl,
    FormControlLabel,
    FormGroup,
    FormLabel,
    Grid,
    InputLabel,
    MenuItem,
    Paper,
    Select,
    Slider,
    Toolbar,
    Typography
} from "@mui/material";
import React, {useEffect, useState} from "react";
import useIndexPage from "@/data/hooks/pages/useIndex.page";
import {Controller, SubmitHandler, useForm} from "react-hook-form";
import {ISearchForm} from "@/data/interfaces/ISearchForm";
import {ServersList} from "@/ui/components/ServersList";

export default function Home() {
    const {
        isLoadingLocations,
        isLoadingServers,
        servers,
        locations,
        getLocations,
        onSubmit
    } = useIndexPage();

    const [page, setPage] = useState<number>(1);
    const [rowsPerPage, setRowsPerPage] = useState<number>(10);

    const {
        handleSubmit,
        register,
        control,
        getValues
    } = useForm();

    const handleChangePage = (
        event: React.MouseEvent<HTMLButtonElement> | null,
        newPage: number,
    ) => {
        setPage(newPage);
    };

    const handleChangeRowsPerPage = (
        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    ) => {
        setRowsPerPage(parseInt(event.target.value, 10));
        setPage(1);
    };

    const onSubmitForm: SubmitHandler<ISearchForm> = data => {
        const newData = {
            ...data,
            page: page,
            per_page: rowsPerPage
        }

        onSubmit(newData);
    }

    useEffect(() => {
        getLocations();
    }, []);

    useEffect(() => {
        const values = getValues();
        onSubmitForm({...values, page: page, per_page: rowsPerPage});
    }, [page]);

    useEffect(() => {
        const values = getValues();
        onSubmitForm({...values, page: 1, per_page: rowsPerPage});
    }, [rowsPerPage]);

    return (
        <>
            <Head>
                <title>Velv Frontend</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <AppBar
                position="absolute"
                color="default"
                elevation={0}
                sx={{
                    position: 'relative',
                }}
            >
                <Toolbar>
                    <Typography variant="h6" color="inherit" noWrap>
                        Lease Servers Search
                    </Typography>
                </Toolbar>
            </AppBar>
            <Container component="main" sx={{mb: 4}}>
                <Paper variant="outlined" sx={{my: {xs: 3, md: 6}, p: {xs: 2, md: 3}}}>
                    {isLoadingLocations && (
                        <Box textAlign="center">
                            <CircularProgress/>
                        </Box>
                    )}
                    {!isLoadingLocations && (
                        <Box component="form" onSubmit={handleSubmit(onSubmitForm)}>
                            <Typography>Search Form</Typography>
                            <Divider sx={{mt: 2, mb: 2}}/>
                            <Grid container spacing={2}>
                                <Grid item xs={12} xl={6}>
                                    <FormGroup>
                                        <FormLabel component="legend">
                                            Select disk space size (GB):
                                        </FormLabel>
                                        <Controller
                                            defaultValue={0}
                                            control={control}
                                            render={(props) => (
                                                <Slider
                                                    {...props}
                                                    min={0}
                                                    max={72000}
                                                    valueLabelDisplay="auto"
                                                    value={props.field.value}
                                                    onChange={props.field.onChange}
                                                />
                                            )}
                                            name={'storage'}
                                        />

                                    </FormGroup>
                                </Grid>
                                <Grid item xs={12} xl={6}>
                                    <Box sx={{display: 'flex'}}>
                                        <FormControl sx={{ml: 3}} component="fieldset" variant="standard" fullWidth>
                                            <FormLabel component="legend">RAM Memory:</FormLabel>
                                            <FormGroup>
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="2GB"
                                                    label="2GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="4GB"
                                                    label="4GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="8GB"
                                                    label="8GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="12GB"
                                                    label="12GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="16GB"
                                                    label="16GB"
                                                />
                                            </FormGroup>
                                        </FormControl>
                                        <FormControl component="fieldset" variant="standard" fullWidth>
                                            <FormGroup>
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="24GB"
                                                    label="24GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="32GB"
                                                    label="32GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="48GB"
                                                    label="48GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="64GB"
                                                    label="64GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="96GB"
                                                    label="96GB"
                                                />
                                            </FormGroup>
                                        </FormControl>
                                    </Box>
                                </Grid>
                                <Grid item xs={12} xl={6}>
                                    <FormControl fullWidth>
                                        <InputLabel id="demo-simple-select-label">HardDisk Type</InputLabel>
                                        <Select
                                            labelId="demo-simple-select-label"
                                            id="demo-simple-select"
                                            // value={''}
                                            label="HardDisk Type"
                                            {...register('hard_disk_type')}
                                        >
                                            <MenuItem value={'SAS'}>SAS</MenuItem>
                                            <MenuItem value={'SATA'}>SATA</MenuItem>
                                            <MenuItem value={'SSD'}>SSD</MenuItem>
                                        </Select>
                                    </FormControl>
                                </Grid>
                                <Grid item xs={12} xl={6}>
                                    <FormControl fullWidth>
                                        <InputLabel id="demo-simple-select-label">Server Location</InputLabel>
                                        <Select
                                            labelId="demo-simple-select-label"
                                            id="demo-simple-select"
                                            label="Server Location"
                                            {...register('location')}
                                            disabled={isLoadingLocations}
                                        >
                                            {locations?.map((value, key) => {
                                                return (
                                                    <MenuItem key={key} value={value}>{value}</MenuItem>
                                                );
                                            })}
                                        </Select>
                                    </FormControl>
                                </Grid>
                                <Grid item alignItems={'end'}>
                                    <Button type="submit" variant="contained" disabled={isLoadingLocations}>
                                        Search
                                    </Button>
                                </Grid>
                            </Grid>
                        </Box>
                    )}
                    <Divider sx={{mt: 3, mb: 3}}/>
                    <Box>
                        {isLoadingServers && (
                            <Box textAlign="center">
                                <CircularProgress/>
                            </Box>
                        )}
                        {!isLoadingServers && servers?.data?.length === 0 && (
                            <Typography mt={5}>
                                Servers not found! Use the form above to start your search.
                            </Typography>
                        )}
                        {!isLoadingServers && servers?.data?.length > 0 && (
                            <ServersList
                                servers={servers}
                                onPageChange={handleChangePage}
                                onRowsPerPageChange={handleChangeRowsPerPage}
                            />
                        )}
                    </Box>
                </Paper>
            </Container>

        </>
    )
}
