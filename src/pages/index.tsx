import Head from 'next/head'
import {
    AppBar,
    Box,
    Button,
    Checkbox,
    CircularProgress,
    Container,
    Divider,
    FormControl,
    FormControlLabel,
    FormGroup,
    FormLabel,
    Grid,
    IconButton,
    InputLabel,
    MenuItem,
    Paper,
    Select,
    Slider,
    Table,
    TableBody,
    TableCell,
    TableFooter,
    TableHead,
    TablePagination,
    TableRow,
    Toolbar,
    Typography
} from "@mui/material";
import React, {useEffect, useState} from "react";
import useIndexPage from "@/data/hooks/pages/useIndex.page";
import {Controller, useForm} from "react-hook-form";
import {useTheme} from "@mui/system";
import FirstPageIcon from '@mui/icons-material/FirstPage';
import KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';
import KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';
import LastPageIcon from '@mui/icons-material/LastPage';


interface TablePaginationActionsProps {
    count: number;
    page: number;
    rowsPerPage: number;
    onPageChange: (
        event: React.MouseEvent<HTMLButtonElement>,
        newPage: number,
    ) => void;
}

function TablePaginationActions(props: TablePaginationActionsProps) {
    const theme = useTheme();
    const { count, page, rowsPerPage, onPageChange } = props;

    const handleFirstPageButtonClick = (
        event: React.MouseEvent<HTMLButtonElement>,
    ) => {
        onPageChange(event, 1);
    };

    const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {
        onPageChange(event, page - 1);
    };

    const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {
        onPageChange(event, page + 1);
    };

    const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {
        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
    };

    return (
        <Box sx={{ flexShrink: 0, ml: 2.5 }}>
            <IconButton
                onClick={handleFirstPageButtonClick}
                disabled={page === 1}
                aria-label="first page"
            >
                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}
            </IconButton>
            <IconButton
                onClick={handleBackButtonClick}
                disabled={page === 1}
                aria-label="previous page"
            >
                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}
            </IconButton>
            <IconButton
                onClick={handleNextButtonClick}
                disabled={page >= Math.ceil(count / rowsPerPage) - 1}
                aria-label="next page"
            >
                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}
            </IconButton>
            <IconButton
                onClick={handleLastPageButtonClick}
                disabled={page >= Math.ceil(count / rowsPerPage) - 1}
                aria-label="last page"
            >
                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}
            </IconButton>
        </Box>
    );
}

export default function Home() {
    const {
        isLoadingLocations,
        isLoadingServers,
        servers,
        locations,
        getLocations,
        onSubmit
    } = useIndexPage();

    const [page, setPage] = useState<number>(1);
    const [rowsPerPage, setRowsPerPage] = useState<number>(10);

    const { register,
        handleSubmit,
        control,
        getValues
    } = useForm();

    const locationForm = getValues('location');
    const ramForm = getValues('ram');
    const hardDiskTypeForm = getValues('hark_disk_type');
    const storageForm = getValues('storage');

    const handleChangePage = (
        event: React.MouseEvent<HTMLButtonElement> | null,
        newPage: number,
    ) => {
        setPage(newPage);
    };

    const handleChangeRowsPerPage = (
        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    ) => {
        setRowsPerPage(parseInt(event.target.value, 10));
        setPage(1);
    };

    useEffect(() => {
        getLocations();
    }, []);

    useEffect(() => {
        console.log(locationForm,
        ramForm,
        hardDiskTypeForm,
        storageForm);

        onSubmit({
            page: page,
            per_page: rowsPerPage,
            location: locationForm,
            ram: ramForm,
            hard_disk_type: hardDiskTypeForm,
            storage: storageForm
        });
    }, [page]);

    useEffect(() => {
        onSubmit({
            page: 1,
            per_page: rowsPerPage,
            location: locationForm,
            ram: ramForm,
            hard_disk_type: hardDiskTypeForm,
            storage: storageForm
        });
    }, [rowsPerPage]);

    return (
        <>
            <Head>
                <title>Velv Frontend</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <AppBar
                position="absolute"
                color="default"
                elevation={0}
                sx={{
                    position: 'relative',
                }}
            >
                <Toolbar>
                    <Typography variant="h6" color="inherit" noWrap>
                        Lease Servers Search
                    </Typography>
                </Toolbar>
            </AppBar>
            <Container component="main" sx={{mb: 4}}>
                <Paper variant="outlined" sx={{my: {xs: 3, md: 6}, p: {xs: 2, md: 3}}}>
                    {isLoadingLocations && (
                        <Box textAlign="center">
                            <CircularProgress/>
                        </Box>
                    )}
                    {!isLoadingLocations && (
                        <Box component="form" onSubmit={handleSubmit(onSubmit)}>
                            <Typography>Search Form</Typography>
                            <Divider sx={{mt: 2, mb: 2}}/>
                            <Grid container spacing={2}>
                                <Grid item xs={12} xl={6}>
                                    <FormGroup>
                                        <FormLabel component="legend">
                                            Select disk space size (GB):
                                        </FormLabel>
                                        <Controller
                                            defaultValue={0}
                                            control={control}
                                            render={(props) => (
                                                <Slider
                                                    {...props}
                                                    min={0}
                                                    max={72000}
                                                    valueLabelDisplay="auto"
                                                    value={props.field.value}
                                                    onChange={props.field.onChange}
                                                />
                                            )}
                                            name={'storage'}
                                        />

                                    </FormGroup>
                                </Grid>
                                <Grid item xs={12} xl={6}>
                                    <Box sx={{display: 'flex'}}>
                                        <FormControl sx={{ml: 3}} component="fieldset" variant="standard" fullWidth>
                                            <FormLabel component="legend">RAM Memory:</FormLabel>
                                            <FormGroup>
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="2GB"
                                                    label="2GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="4GB"
                                                    label="4GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="8GB"
                                                    label="8GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="12GB"
                                                    label="12GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="16GB"
                                                    label="16GB"
                                                />
                                            </FormGroup>
                                        </FormControl>
                                        <FormControl component="fieldset" variant="standard" fullWidth>
                                            <FormGroup>
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="24GB"
                                                    label="24GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="32GB"
                                                    label="32GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="48GB"
                                                    label="48GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="64GB"
                                                    label="64GB"
                                                />
                                                <FormControlLabel
                                                    control={
                                                        <Checkbox {...register('ram')} />
                                                    }
                                                    value="96GB"
                                                    label="96GB"
                                                />
                                            </FormGroup>
                                        </FormControl>
                                    </Box>
                                </Grid>
                                <Grid item xs={12} xl={6}>
                                    <FormControl fullWidth>
                                        <InputLabel id="demo-simple-select-label">HardDisk Type</InputLabel>
                                        <Select
                                            labelId="demo-simple-select-label"
                                            id="demo-simple-select"
                                            // value={''}
                                            label="HardDisk Type"
                                            {...register('hard_disk_type')}
                                        >
                                            <MenuItem value={'SAS'}>SAS</MenuItem>
                                            <MenuItem value={'SATA'}>SATA</MenuItem>
                                            <MenuItem value={'SSD'}>SSD</MenuItem>
                                        </Select>
                                    </FormControl>
                                </Grid>
                                <Grid item xs={12} xl={6}>
                                    <FormControl fullWidth>
                                        <InputLabel id="demo-simple-select-label">Server Location</InputLabel>
                                        <Select
                                            labelId="demo-simple-select-label"
                                            id="demo-simple-select"
                                            label="Server Location"
                                            {...register('location')}
                                            disabled={isLoadingLocations}
                                        >
                                            {locations?.map((value, key) => {
                                                return (
                                                    <MenuItem key={key} value={value}>{value}</MenuItem>
                                                );
                                            })}
                                        </Select>
                                    </FormControl>
                                </Grid>
                                <Grid item alignItems={'end'}>
                                    <Button type="submit" variant="contained" disabled={isLoadingLocations}>
                                        Search
                                    </Button>
                                </Grid>
                            </Grid>
                        </Box>
                    )}
                    <Divider sx={{mt: 3, mb: 3}}/>
                    <Box>
                        Use the form above to start your search...
                        {isLoadingServers && (
                            <Box textAlign="center">
                                <CircularProgress/>
                            </Box>
                        )}
                        {!isLoadingServers && servers?.data?.length > 0 && (
                            <Table sx={{ minWidth: 500 }} aria-label="custom pagination table">
                                <TableHead>
                                    <TableRow>
                                        <TableCell>Model</TableCell>
                                        <TableCell>RAM</TableCell>
                                        <TableCell>HDD</TableCell>
                                        <TableCell>Location</TableCell>
                                        <TableCell>Price</TableCell>
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    {servers?.data?.map((server) => (
                                        <TableRow key={server.id}>
                                            <TableCell component="th" scope="row">
                                                {server.model}
                                            </TableCell>
                                            <TableCell component="th" scope="row">
                                                {server.original_ram}
                                            </TableCell>
                                            <TableCell component="th" scope="row">
                                                {server.storage}
                                            </TableCell>
                                            <TableCell component="th" scope="row">
                                                {server.location}
                                            </TableCell>
                                            <TableCell component="th" scope="row">
                                                {server.price}
                                            </TableCell>
                                        </TableRow>
                                    ))}
                                </TableBody>
                                <TableFooter>
                                    <TableRow>
                                        <TablePagination
                                            rowsPerPageOptions={[5, 10, 25, 50, 100]}
                                            colSpan={3}
                                            count={servers?.total ?? 0}
                                            rowsPerPage={servers?.per_page ?? 10}
                                            page={servers?.current_page ?? 1}
                                            onPageChange={handleChangePage}
                                            onRowsPerPageChange={handleChangeRowsPerPage}
                                            ActionsComponent={TablePaginationActions}
                                        />
                                    </TableRow>
                                </TableFooter>
                            </Table>
                        )}
                    </Box>
                </Paper>
            </Container>

        </>
    )
}
