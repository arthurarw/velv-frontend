import Head from 'next/head'
import {AppBar, Box, CircularProgress, Container, Divider, Paper, Toolbar, Typography} from "@mui/material";
import React, {useEffect, useState} from "react";
import useIndexPage from "@/data/hooks/pages/useIndex.page";
import {SubmitHandler, useForm} from "react-hook-form";
import {ISearchForm} from "@/data/interfaces/ISearchForm";
import {ServersList} from "@/ui/components/ServersList";
import {SearchForm} from "@/ui/components/SearchForm";

export default function Home() {
    const {
        isLoadingLocations,
        isLoadingServers,
        servers,
        locations,
        getLocations,
        onSubmit
    } = useIndexPage();

    const [page, setPage] = useState<number>(1);
    const [rowsPerPage, setRowsPerPage] = useState<number>(10);
    const [filter, setFilter] = useState<ISearchForm | null>();

    const {
        getValues
    } = useForm();

    const handleChangePage = (
        event: React.MouseEvent<HTMLButtonElement> | null,
        newPage: number,
    ) => {
        setPage(newPage);
    };

    const handleChangeRowsPerPage = (
        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    ) => {
        setRowsPerPage(parseInt(event.target.value, 10));
        setPage(1);
    };

    const onSubmitForm: SubmitHandler<ISearchForm> = data => {
        setFilter(data);
        const newData = {
            ...data,
            page: page,
            per_page: rowsPerPage
        }

        onSubmit(newData);
    }

    useEffect(() => {
        getLocations();
    }, []);

    useEffect(() => {
        onSubmitForm({ ...filter, page: page, per_page: rowsPerPage });
    }, [page]);

    useEffect(() => {
        onSubmitForm({ ...filter, page: 1, per_page: rowsPerPage });
    }, [rowsPerPage]);

    return (
        <>
            <Head>
                <title>Velv Frontend</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <AppBar
                position="absolute"
                color="default"
                elevation={0}
                sx={{
                    position: 'relative',
                }}
            >
                <Toolbar>
                    <Typography variant="h6" color="inherit" noWrap>
                        Lease Servers Search
                    </Typography>
                </Toolbar>
            </AppBar>
            <Container component="main" sx={{mb: 4}}>
                <Paper variant="outlined" sx={{my: {xs: 3, md: 6}, p: {xs: 2, md: 3}}}>
                    {isLoadingLocations && (
                        <Box textAlign="center">
                            <CircularProgress/>
                        </Box>
                    )}
                    {!isLoadingLocations && (
                        <SearchForm
                            onSubmitForm={onSubmitForm}
                            locations={locations}
                            isLoadingLocations={isLoadingLocations}
                            // values={valuesFromForm}
                        />
                    )}
                    <Divider sx={{mt: 3, mb: 3}}/>
                    <Box>
                        {isLoadingServers && (
                            <Box textAlign="center">
                                <CircularProgress/>
                            </Box>
                        )}
                        {!isLoadingServers && servers?.data?.length === 0 && (
                            <Typography mt={5}>
                                Servers not found! Use the form above to start your search.
                            </Typography>
                        )}
                        {!isLoadingServers && servers?.data?.length > 0 && (
                            <ServersList
                                servers={servers}
                                onPageChange={handleChangePage}
                                onRowsPerPageChange={handleChangeRowsPerPage}
                            />
                        )}
                    </Box>
                </Paper>
            </Container>

        </>
    )
}
